import "jsr:@supabase/functions-js/edge-runtime.d.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Client-Info, Apikey",
};

interface OrderItem {
  product_name: string;
  product_sku: string;
  price: number;
  discount_price?: number;
  quantity: number;
  subtotal: number;
  is_on_sale: boolean;
}

interface PromoCode {
  promo_code_name: string;
  promo_code_description?: string;
  discount_amount: number;
}

interface OrderData {
  order_number: string;
  first_name: string;
  last_name: string;
  email: string;
  phone: string;
  city: string;
  address: string;
  postal_code?: string;
  comment?: string;
  items: OrderItem[];
  subtotal_amount: number;
  discount_amount: number;
  total_amount: number;
  promo_codes: PromoCode[];
}

function formatOrderMessage(order: OrderData): string {
  let message = `üõí <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #${order.order_number}</b>\n\n`;

  message += `üë§ <b>–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ü–û–ö–£–ü–¶–Ø:</b>\n`;
  message += `–Ü–º'—è: ${order.first_name} ${order.last_name}\n`;
  message += `Email: ${order.email}\n`;
  message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}\n\n`;

  message += `üìç <b>–ê–î–†–ï–°–ê –î–û–°–¢–ê–í–ö–ò:</b>\n`;
  const addressParts = [order.city, order.address];
  if (order.postal_code) {
    addressParts.push(order.postal_code);
  }
  message += addressParts.join(', ') + '\n\n';

  if (order.comment) {
    message += `üí¨ <b>–ö–û–ú–ï–ù–¢–ê–† –ü–û–ö–£–ü–¶–Ø:</b>\n`;
    message += `${order.comment}\n\n`;
  }

  message += `üì¶ <b>–¢–û–í–ê–†–ò:</b>\n`;
  order.items.forEach((item, index) => {
    message += `\n${index + 1}. <b>${item.product_name}</b>\n`;
    message += `   –ê—Ä—Ç–∏–∫—É–ª: ${item.product_sku}\n`;

    if (item.discount_price && item.discount_price < item.price) {
      message += `   –¶—ñ–Ω–∞: <s>${item.price.toFixed(2)} ‚Ç¥</s> ‚Üí ${item.discount_price.toFixed(2)} ‚Ç¥\n`;
    } else {
      message += `   –¶—ñ–Ω–∞ –∑–∞ 1 —à—Ç: ${item.price.toFixed(2)} ‚Ç¥\n`;
    }

    message += `   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${item.quantity}\n`;
    message += `   –°—É–º–∞: ${item.subtotal.toFixed(2)} ‚Ç¥\n`;

    if (item.is_on_sale) {
      message += `   ‚ö° <i>–¢–æ–≤–∞—Ä –∑ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—É</i>\n`;
    }
  });

  message += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

  message += `üí∞ <b>–†–û–ó–†–ê–•–£–ù–û–ö:</b>\n`;
  message += `–°—É–º–∞ –±–µ–∑ –∑–Ω–∏–∂–∫–∏: ${order.subtotal_amount.toFixed(2)} ‚Ç¥\n`;

  if (order.promo_codes && order.promo_codes.length > 0) {
    message += `\nüéÅ <b>–í–ò–ö–û–†–ò–°–¢–ê–ù–Ü –ü–†–û–ú–û–ö–û–î–ò:</b>\n`;
    order.promo_codes.forEach((promo) => {
      message += `\n‚Ä¢ <b>${promo.promo_code_name}</b>\n`;
      if (promo.promo_code_description) {
        message += `  ${promo.promo_code_description}\n`;
      }
      message += `  –ó–Ω–∏–∂–∫–∞: -${promo.discount_amount.toFixed(2)} ‚Ç¥\n`;
    });
  }

  if (order.items.some(item => item.is_on_sale)) {
    message += `\n‚ö° <i>–ó–∞—É–≤–∞–∂–µ–Ω–Ω—è: –¥–µ—è–∫—ñ —Ç–æ–≤–∞—Ä–∏ –∫—É–ø–ª–µ–Ω—ñ –∑–∞ –∞–∫—Ü—ñ–π–Ω–æ—é —Ü—ñ–Ω–æ—é</i>\n`;
  }

  if (order.discount_amount > 0) {
    message += `\n<b>–ó–∞–≥–∞–ª—å–Ω–∞ –∑–Ω–∏–∂–∫–∞: -${order.discount_amount.toFixed(2)} ‚Ç¥</b>\n`;
  }

  message += `\nüí≥ <b>–ü–Ü–î–°–£–ú–û–ö: ${order.total_amount.toFixed(2)} ‚Ç¥</b>`;

  return message;
}

async function sendTelegramMessage(botToken: string, chatId: string, message: string): Promise<boolean> {
  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
      }),
    });

    const data = await response.json();

    if (!data.ok) {
      console.error('Telegram API error:', data);
      return false;
    }

    return true;
  } catch (error) {
    console.error('Error sending Telegram message:', error);
    return false;
  }
}

Deno.serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  try {
    const botToken = '8352381824:AAFT27jGPvqvam8_tOq6_LDu45uiazDz8eY';
    const chatId = '1993682286';

    if (!botToken || !chatId) {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'Telegram credentials not configured'
        }),
        {
          status: 500,
          headers: {
            ...corsHeaders,
            'Content-Type': 'application/json',
          },
        }
      );
    }

    const orderData: OrderData = await req.json();

    const message = formatOrderMessage(orderData);
    const success = await sendTelegramMessage(botToken, chatId, message);

    return new Response(
      JSON.stringify({ success }),
      {
        status: success ? 200 : 500,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json',
        },
      }
    );
  } catch (error) {
    console.error('Error in send-telegram-notification:', error);

    return new Response(
      JSON.stringify({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }),
      {
        status: 500,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json',
        },
      }
    );
  }
});